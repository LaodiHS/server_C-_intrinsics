{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"../../../public/styles/a.css\";\nvar divStyle = {\n  backgroundColor: \"#6666ff\",\n  color: \"red\"\n};\n\nclass Paging extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n    this.i = 0;\n  }\n\n  render() {\n    console.log(\"state::\", this.state);\n    setInterval(() => {\n      this.getPages(++this.i);\n    }, 15000);\n    return __jsx(MyPaging, {\n      data: this.state\n    });\n  }\n\n  async getPages(page = 0, order = \"asc\") {\n    let res = await fetch(`https://localhost:3000/users/${page}/${order}`);\n    res = await res.json();\n    res = Array.from(res);\n    this.setState({\n      data: res.map(objects => Object.entries(objects))\n    }, () => {\n      console.log(\"state---->\", this.state);\n    });\n  }\n\n}\n\nconst MyPaging = ({\n  data\n}) => __jsx(Grid, {\n  columns: \"100px 1fr 100px\",\n  rows: \"minmax(100px,auto) 1fr minmax(100px,auto)\"\n}, __jsx(Cell, null, __jsx(\"button\", {\n  onClick: null\n}, \"click me\")), __jsx(Cell, {\n  center: true,\n  middle: true\n}, __jsx(Grid, {\n  columns: \"repeat(auto-fit,minmax(120px,1fr))\"\n}, data.data.map(values => values.map(([key, val], i) => {\n  if (key !== \"password\" && key !== \"passwordsalt\") return __jsx(Cell, {\n    width: 2,\n    height: 2\n  }, key, \" : \", val, \" : \", i);\n})), \" \"), \" \"));\n\nexport default Paging;","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/pages/components/layout/Paging.js"],"names":["styled","Grid","Cell","fetch","divStyle","backgroundColor","color","Paging","React","Component","constructor","state","data","i","render","console","log","setInterval","getPages","page","order","res","json","Array","from","setState","map","objects","Object","entries","MyPaging","values","key","val"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,8BAAP;AACA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,eAAe,EAAE,SADJ;AAEbC,EAAAA,KAAK,EAAE;AAFM,CAAf;;AAIA,MAAMC,MAAN,SAAqBC,KAAK,CAACC,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGA,SAAKC,CAAL,GAAS,CAAT;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKL,KAA5B;AACAM,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKC,QAAL,CAAc,EAAE,KAAKL,CAArB;AACD,KAFU,EAER,KAFQ,CAAX;AAGA,WAAO,MAAC,QAAD;AAAU,MAAA,IAAI,EAAE,KAAKF;AAArB,MAAP;AACD;;AACa,QAARO,QAAQ,CAACC,IAAI,GAAG,CAAR,EAAWC,KAAK,GAAG,KAAnB,EAA0B;AACtC,QAAIC,GAAG,GAAG,MAAMlB,KAAK,CAAE,gCAA+BgB,IAAK,IAAGC,KAAM,EAA/C,CAArB;AACAC,IAAAA,GAAG,GAAG,MAAMA,GAAG,CAACC,IAAJ,EAAZ;AACDD,IAAAA,GAAG,GAAEE,KAAK,CAACC,IAAN,CAAWH,GAAX,CAAL;AACC,SAAKI,QAAL,CAAc;AAAEb,MAAAA,IAAI,EAAGS,GAAG,CAACK,GAAJ,CAAQC,OAAO,IAAIC,MAAM,CAACC,OAAP,CAAeF,OAAf,CAAnB;AAAT,KAAd,EAAsE,MAAM;AAC1EZ,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKL,KAA/B;AACD,KAFD;AAGD;;AAxBkC;;AA0BrC,MAAMmB,QAAQ,GAAG,CAAC;AAAElB,EAAAA;AAAF,CAAD,KACf,MAAC,IAAD;AACA,EAAA,OAAO,EAAE,iBADT;AAEA,EAAA,IAAI,EAAE;AAFN,GAGC,MAAC,IAAD,QAAM;AAAQ,EAAA,OAAO,EAAG;AAAlB,cAAN,CAHD,EAKE,MAAC,IAAD;AAAM,EAAA,MAAM,MAAZ;AAAa,EAAA,MAAM;AAAnB,GACE,MAAC,IAAD;AAAM,EAAA,OAAO,EAAC;AAAd,GAEGA,IAAI,CAACA,IAAL,CAAUc,GAAV,CAAcK,MAAM,IAAIA,MAAM,CAACL,GAAP,CAAW,CAAC,CAACM,GAAD,EAAMC,GAAN,CAAD,EAAapB,CAAb,KACpC;AACE,MAAImB,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,cAAlC,EACA,OACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAb;AAAgB,IAAA,MAAM,EAAE;AAAxB,KACGA,GADH,SACWC,GADX,SACmBpB,CADnB,CADF;AAMD,CATwB,CAAxB,CAFH,EAWQ,GAXR,CADF,EAaU,GAbV,CALF,CADF;;AAwBA,eAAeN,MAAf","sourcesContent":["import styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"../../../public/styles/a.css\";\nvar divStyle = {\n  backgroundColor: \"#6666ff\",\n  color: \"red\",\n};\nclass Paging extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: [],\n    };\n    this.i = 0;\n  }\n\n  render() {\n    console.log(\"state::\", this.state);\n    setInterval(() => {\n      this.getPages(++this.i);\n    }, 15000);\n    return <MyPaging data={this.state}></MyPaging>;\n  }\n  async getPages(page = 0, order = \"asc\") {\n    let res = await fetch(`https://localhost:3000/users/${page}/${order}`);\n    res = await res.json();\n   res= Array.from(res)\n    this.setState({ data : res.map(objects => Object.entries(objects)) }, () => {\n      console.log(\"state---->\", this.state);\n    });\n  }\n}\nconst MyPaging = ({ data }) => (\n  <Grid\n  columns={\"100px 1fr 100px\"}\n  rows={\"minmax(100px,auto) 1fr minmax(100px,auto)\"}\n  ><Cell><button onClick={ null}>click me</button></Cell>\n    \n    <Cell center middle>\n      <Grid columns=\"repeat(auto-fit,minmax(120px,1fr))\">\n      \n        {data.data.map(values => values.map(([key, val], i) =>\n        {\n          if (key !== \"password\" && key !== \"passwordsalt\")\n          return (\n            <Cell width={2} height={2} >\n              {key} : {val} : {i}\n            </Cell>\n          );\n\n        } ))}{\" \"}\n      </Grid>{\" \"}\n    </Cell>\n  </Grid>\n);\n\nexport default Paging;\n"]},"metadata":{},"sourceType":"module"}