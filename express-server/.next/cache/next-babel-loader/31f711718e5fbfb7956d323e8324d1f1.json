{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar __jsx = React.createElement;\n// var mongoUtil = require( 'mongoUtil' );\n// var db = mongoUtil.getDb();\n// db.collection( 'users' ).find();\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { Grid, Cell } from \"styled-css-grid\";\n\nvar MyGrid = function MyGrid(val) {\n  return __jsx(Grid, {\n    columns: val.object.length,\n    gap: \"2px\"\n  }, _Object$entries(val.object).map(function (_ref, i) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        val = _ref2[1];\n\n    return __jsx(Cell, {\n      className: \"whatEver\",\n      key: i\n    }, \" \", key, \":\", val, \"  \");\n  }), __jsx(Cell, null, _JSON$stringify(val)));\n};\n\nvar Button = styled.button.withConfig({\n  displayName: \"pages__Button\",\n  componentId: \"sc-18qv4sc-0\"\n})([\"color:palevioletred;font-size:1em;margin:1em;padding:0.25em 1em;border:2px solid palevioletred;border-radius:3px;\"]); // A new component based on Button, but with some override styles\n\nvar TomatoButton = styled(Button).withConfig({\n  displayName: \"pages__TomatoButton\",\n  componentId: \"sc-18qv4sc-1\"\n})([\"color:tomato;border-color:tomato;\"]);\nimport Login from \"./login/login\";\nimport \"../public/styles/a.css\"; // const da =postgres.getUsers();\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", null, __jsx(MyGrid, {\n    object: props.data\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var pageRequest, res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pageRequest = \"https://localhost:3000/users\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(pageRequest));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          json = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: json\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/pages/index.js"],"names":["fetch","Link","React","styled","Grid","Cell","MyGrid","val","object","length","map","i","key","Button","button","TomatoButton","Login","Index","props","data","getInitialProps","pageRequest","res","json"],"mappings":";;;;;AAAA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD;AAAA,SAEX,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEA,GAAG,CAACC,MAAJ,CAAWC,MAA1B;AAAkC,IAAA,GAAG,EAAC;AAAtC,KAEQ,gBAAeF,GAAG,CAACC,MAAnB,EAA2BE,GAA3B,CAA+B,gBAAaC,CAAb,EAC/B;AAAA;AAAA,QADiCC,GACjC;AAAA,QADsCL,GACtC;;AACI,WAAO,MAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAA2B,MAAA,GAAG,EAAEI;AAAhC,YAAsCC,GAAtC,OAA4CL,GAA5C,OAAP;AACH,GAHD,CAFR,EAOI,MAAC,IAAD,QAAO,gBAAeA,GAAf,CAAP,CAPJ,CAFW;AAAA,CAAf;;AAcA,IAAMM,MAAM,GAAGV,MAAM,CAACW,MAAV;AAAA;AAAA;AAAA,yHAAZ,C,CASA;;AACA,IAAMC,YAAY,GAAGZ,MAAM,CAACU,MAAD,CAAT;AAAA;AAAA;AAAA,yCAAlB;AAKA,OAAOG,KAAP,MAAkB,eAAlB;AAEA,OAAO,wBAAP,C,CAEA;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,SAEd,mBAGQ,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAGA,KAAK,CAACC;AAAvB,IAHR,CAFc;AAAA,CAAd;;AAmBQF,KAAK,CAACG,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UAAAA,WADc;AAAA;AAAA,2CAEFrB,KAAK,CAACqB,WAAD,CAFH;;AAAA;AAEdC,UAAAA,GAFc;AAAA;AAAA,2CAGDA,GAAG,CAACC,IAAJ,EAHC;;AAAA;AAGdA,UAAAA,IAHc;AAAA,2CAKb;AACHJ,YAAAA,IAAI,EAAEI;AADH,WALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAUR,eAAeN,KAAf","sourcesContent":["// var mongoUtil = require( 'mongoUtil' );\n// var db = mongoUtil.getDb();\n\n// db.collection( 'users' ).find();\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from \"react\";\n\nimport styled from 'styled-components';\nimport { Grid, Cell } from \"styled-css-grid\";\nconst MyGrid = (val) => (\n    \n    <Grid columns={val.object.length} gap=\"2px\">\n        {\n            Object.entries(val.object).map(([key, val], i) =>\n            {\n                return <Cell className=\"whatEver\" key={i} > {key}:{val}  </Cell>\n            })\n        }\n        <Cell>{JSON.stringify(val)}</Cell>\n    </Grid>\n \n);\n  \nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// A new component based on Button, but with some override styles\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nimport Login from \"./login/login\";\n\nimport \"../public/styles/a.css\";\n\n// const da =postgres.getUsers();\n\nconst Index = (props) => (\n\n<div >\n  \n     \n        <MyGrid object= {props.data} ></MyGrid>\n            {/* {props.data.map(( obj) =>\n            {\n               return  Object.entries(obj).map( ([key, val], i) => {\n                return <Cell className=\"whatEver\" key={i} > {key}:{val}  </Cell>\n                });\n            })} */}\n       \n  \n\n    \n</div>\n \n       )\n        Index.getInitialProps = async() => {\n            const pageRequest = `https://localhost:3000/users`;\n            const res = await fetch(pageRequest)\n            const json = await res.json();\n         \n            return {\n                data: json\n            }\n        }\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}