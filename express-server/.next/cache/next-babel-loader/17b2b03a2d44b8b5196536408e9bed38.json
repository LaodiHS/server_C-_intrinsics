{"ast":null,"code":"var _parseInt = require(\"@babel/runtime-corejs2/core-js/parse-int\");\n\nvar pool = require('./connection').pool;\n\nvar getUsers = function getUsers(request, response) {\n  pool.query('SELECT * FROM users ORDER BY id ASC', function (error, results) {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).json(results.rows);\n  });\n};\n\nvar getUserById = function getUserById(request, response) {\n  var id = _parseInt(request.params.id);\n\n  pool.query('SELECT * FROM users WHERE id = $1', [id], function (error, results) {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).json(results.rows);\n  });\n};\n\nvar createUser = function createUser(request, response) {\n  var _request$body = request.body,\n      name = _request$body.name,\n      email = _request$body.email;\n  pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email], function (error, results) {\n    if (error) {\n      throw error;\n    }\n\n    response.status(201).send(\"User added with ID: \".concat(result.insertId));\n  });\n};\n\nvar updateUser = function updateUser(request, response) {\n  var id = _parseInt(request.params.id);\n\n  var _request$body2 = request.body,\n      name = _request$body2.name,\n      email = _request$body2.email;\n  pool.query('UPDATE users SET name = $1, email = $2 WHERE id = $3', [name, email, id], function (error, results) {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).send(\"User modified with ID: \".concat(id));\n  });\n};\n\nvar deleteUser = function deleteUser(request, response) {\n  var id = _parseInt(request.params.id);\n\n  pool.query('DELETE FROM users WHERE id = $1', [id], function (error, results) {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).send(\"User deleted with ID: \".concat(id));\n  });\n};\n\nmodule.exports = {\n  getUsers: getUsers,\n  getUserById: getUserById,\n  createUser: createUser,\n  updateUser: updateUser,\n  deleteUser: deleteUser\n};","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/databases/postgres/queries.js"],"names":["pool","require","getUsers","request","response","query","error","results","status","json","rows","getUserById","id","params","createUser","body","name","email","send","result","insertId","updateUser","deleteUser","module","exports"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,IAArC;;AAEA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAUC,QAAV,EAAuB;AACtCJ,EAAAA,IAAI,CAACK,KAAL,CAAW,qCAAX,EAAkD,UAACC,KAAD,EAAQC,OAAR,EAAoB;AACpE,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BF,OAAO,CAACG,IAAlC;AACD,GALD;AAMD,CAPD;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACR,OAAD,EAAUC,QAAV,EAAuB;AACzC,MAAMQ,EAAE,GAAG,UAAST,OAAO,CAACU,MAAR,CAAeD,EAAxB,CAAX;;AAEAZ,EAAAA,IAAI,CAACK,KAAL,CAAW,mCAAX,EAAgD,CAACO,EAAD,CAAhD,EAAsD,UAACN,KAAD,EAAQC,OAAR,EAAoB;AACxE,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BF,OAAO,CAACG,IAAlC;AACD,GALD;AAMD,CATD;;AAWA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACX,OAAD,EAAUC,QAAV,EAAuB;AAAA,sBAIpCD,OAAO,CAACY,IAJ4B;AAAA,MAEtCC,IAFsC,iBAEtCA,IAFsC;AAAA,MAGtCC,KAHsC,iBAGtCA,KAHsC;AAMxCjB,EAAAA,IAAI,CAACK,KAAL,CAAW,iDAAX,EAA8D,CAACW,IAAD,EAAOC,KAAP,CAA9D,EAA6E,UAACX,KAAD,EAAQC,OAAR,EAAoB;AAC/F,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,+BAAiDC,MAAM,CAACC,QAAxD;AACD,GALD;AAMD,CAZD;;AAcA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAClB,OAAD,EAAUC,QAAV,EAAuB;AACxC,MAAMQ,EAAE,GAAG,UAAST,OAAO,CAACU,MAAR,CAAeD,EAAxB,CAAX;;AADwC,uBAKpCT,OAAO,CAACY,IAL4B;AAAA,MAGtCC,IAHsC,kBAGtCA,IAHsC;AAAA,MAItCC,KAJsC,kBAItCA,KAJsC;AAOxCjB,EAAAA,IAAI,CAACK,KAAL,CACE,sDADF,EAEE,CAACW,IAAD,EAAOC,KAAP,EAAcL,EAAd,CAFF,EAGE,UAACN,KAAD,EAAQC,OAAR,EAAoB;AAClB,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,kCAAoDN,EAApD;AACD,GARH;AAUD,CAjBD;;AAmBA,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAACnB,OAAD,EAAUC,QAAV,EAAuB;AACxC,MAAMQ,EAAE,GAAG,UAAST,OAAO,CAACU,MAAR,CAAeD,EAAxB,CAAX;;AAEAZ,EAAAA,IAAI,CAACK,KAAL,CAAW,iCAAX,EAA8C,CAACO,EAAD,CAA9C,EAAoD,UAACN,KAAD,EAAQC,OAAR,EAAoB;AACtE,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,iCAAmDN,EAAnD;AACD,GALD;AAMD,CATD;;AAWAW,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,QAAQ,EAARA,QADe;AAEfS,EAAAA,WAAW,EAAXA,WAFe;AAGfG,EAAAA,UAAU,EAAVA,UAHe;AAIfO,EAAAA,UAAU,EAAVA,UAJe;AAKfC,EAAAA,UAAU,EAAVA;AALe,CAAjB","sourcesContent":["const pool = require('./connection').pool;\n\nconst getUsers = (request, response) => {\n  pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(200).json(results.rows)\n  })\n}\n\nconst getUserById = (request, response) => {\n  const id = parseInt(request.params.id)\n\n  pool.query('SELECT * FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(200).json(results.rows)\n  })\n}\n\nconst createUser = (request, response) => {\n  const {\n    name,\n    email\n  } = request.body\n\n  pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email], (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(201).send(`User added with ID: ${result.insertId}`)\n  })\n}\n\nconst updateUser = (request, response) => {\n  const id = parseInt(request.params.id)\n  const {\n    name,\n    email\n  } = request.body\n\n  pool.query(\n    'UPDATE users SET name = $1, email = $2 WHERE id = $3',\n    [name, email, id],\n    (error, results) => {\n      if (error) {\n        throw error\n      }\n      response.status(200).send(`User modified with ID: ${id}`)\n    }\n  )\n}\n\nconst deleteUser = (request, response) => {\n  const id = parseInt(request.params.id)\n\n  pool.query('DELETE FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(200).send(`User deleted with ID: ${id}`)\n  })\n}\n\nmodule.exports = {\n  getUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser,\n}"]},"metadata":{},"sourceType":"script"}