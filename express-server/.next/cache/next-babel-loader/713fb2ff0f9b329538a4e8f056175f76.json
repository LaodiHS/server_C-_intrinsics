{"ast":null,"code":"import _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar __jsx = React.createElement;\n// var mongoUtil = require( 'mongoUtil' );\n// var db = mongoUtil.getDb();\n// db.collection( 'users' ).find();\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { Grid, Cell } from \"styled-css-grid\";\n\nconst MyGrid = val => __jsx(Grid, {\n  columns: val.object.length,\n  gap: \"2px\"\n}, val.object.map(([key, val], i) => {\n  return __jsx(Cell, {\n    key: i\n  }, key, \" : \", val);\n}));\n\nconst Button = styled.button.withConfig({\n  displayName: \"pages__Button\",\n  componentId: \"sc-18qv4sc-0\"\n})([\"color:palevioletred;font-size:1em;margin:1em;padding:0.25em 1em;border:2px solid palevioletred;border-radius:3px;\"]); // A new component based on Button, but with some override styles\n\nconst TomatoButton = styled(Button).withConfig({\n  displayName: \"pages__TomatoButton\",\n  componentId: \"sc-18qv4sc-1\"\n})([\"color:tomato;border-color:tomato;\"]);\nimport Login from \"./login/login\";\nimport \"../public/styles/a.css\"; // const da =postgres.getUsers();\n\nconst Index = props => __jsx(\"div\", null, __jsx(MyGrid, {\n  object: _Object$entries(props.data)\n}));\n\nIndex.getInitialProps = async () => {\n  const pageRequest = `https://localhost:3000/users`;\n  const res = await fetch(pageRequest);\n  const json = await res.json();\n  return {\n    data: json\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/pages/index.js"],"names":["fetch","Link","React","styled","Grid","Cell","MyGrid","val","object","length","map","key","i","Button","button","TomatoButton","Login","Index","props","data","getInitialProps","pageRequest","res","json"],"mappings":";;AAAA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;;AACA,MAAMC,MAAM,GAAIC,GAAD,IAEX,MAAC,IAAD;AAAM,EAAA,OAAO,EAAEA,GAAG,CAACC,MAAJ,CAAWC,MAA1B;AAAkC,EAAA,GAAG,EAAC;AAAtC,GAEMF,GAAG,CAACC,MAAJ,CAAWE,GAAX,CAAe,CAAC,CAAEC,GAAF,EAAOJ,GAAP,CAAD,EAAcK,CAAd,KAAkB;AAC/B,SAAO,MAAC,IAAD;AAAM,IAAA,GAAG,EAAEA;AAAX,KAAeD,GAAf,SAAuBJ,GAAvB,CAAP;AACH,CAFC,CAFN,CAFJ;;AASA,MAAMM,MAAM,GAAGV,MAAM,CAACW,MAAV;AAAA;AAAA;AAAA,yHAAZ,C,CASA;;AACA,MAAMC,YAAY,GAAGZ,MAAM,CAACU,MAAD,CAAT;AAAA;AAAA;AAAA,yCAAlB;AAKA,OAAOG,KAAP,MAAkB,eAAlB;AAEA,OAAO,wBAAP,C,CAEA;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAEd,mBAGQ,MAAC,MAAD;AAAQ,EAAA,MAAM,EAAG,gBAAeA,KAAK,CAACC,IAArB;AAAjB,EAHR,CAFA;;AAmBQF,KAAK,CAACG,eAAN,GAAwB,YAAW;AAC/B,QAAMC,WAAW,GAAI,8BAArB;AACA,QAAMC,GAAG,GAAG,MAAMtB,KAAK,CAACqB,WAAD,CAAvB;AACA,QAAME,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AAEA,SAAO;AACHJ,IAAAA,IAAI,EAAEI;AADH,GAAP;AAGH,CARD;;AAUR,eAAeN,KAAf","sourcesContent":["// var mongoUtil = require( 'mongoUtil' );\n// var db = mongoUtil.getDb();\n\n// db.collection( 'users' ).find();\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from \"react\";\n\nimport styled from 'styled-components';\nimport { Grid, Cell } from \"styled-css-grid\";\nconst MyGrid = (val) => (\n    \n    <Grid columns={val.object.length} gap=\"2px\">\n       \n        { val.object.map(([ key, val], i)=>{\n            return <Cell key={i}>{key} : {val}</Cell>\n        })}\n    </Grid>\n  );\nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// A new component based on Button, but with some override styles\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nimport Login from \"./login/login\";\n\nimport \"../public/styles/a.css\";\n\n// const da =postgres.getUsers();\n\nconst Index = (props) => (\n\n<div >\n  \n     \n        <MyGrid object= {Object.entries(props.data)} ></MyGrid>\n            {/* {props.data.map(( obj) =>\n            {\n               return  Object.entries(obj).map( ([key, val], i) => {\n                return <Cell className=\"whatEver\" key={i} > {key}:{val}  </Cell>\n                });\n            })} */}\n       \n  \n\n    \n</div>\n \n       )\n        Index.getInitialProps = async() => {\n            const pageRequest = `https://localhost:3000/users`;\n            const res = await fetch(pageRequest)\n            const json = await res.json();\n         \n            return {\n                data: json\n            }\n        }\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}