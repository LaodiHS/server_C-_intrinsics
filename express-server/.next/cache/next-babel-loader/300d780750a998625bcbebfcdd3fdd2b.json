{"ast":null,"code":"var _parseInt = require(\"@babel/runtime-corejs2/core-js/parse-int\");\n\nconst pool = require('./connection').pool;\n\nconst getUsers = (request, response) => {\n  pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).json(results.rows);\n  });\n};\n\nconst getUserById = (request, response) => {\n  const id = _parseInt(request.params.id);\n\n  pool.query('SELECT * FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).json(results.rows);\n  });\n};\n\nconst createUser = (request, response) => {\n  const {\n    name,\n    email\n  } = request.body;\n  pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(201).send(`User added with ID: ${result.insertId}`);\n  });\n};\n\nconst updateUser = (request, response) => {\n  const id = _parseInt(request.params.id);\n\n  const {\n    name,\n    email\n  } = request.body;\n  pool.query('UPDATE users SET name = $1, email = $2 WHERE id = $3', [name, email, id], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).send(`User modified with ID: ${id}`);\n  });\n};\n\nconst deleteUser = (request, response) => {\n  const id = _parseInt(request.params.id);\n\n  pool.query('DELETE FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).send(`User deleted with ID: ${id}`);\n  });\n};\n\nmodule.exports = {\n  getUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/databases/postgres/queries.js"],"names":["pool","require","getUsers","request","response","query","error","results","status","json","rows","getUserById","id","params","createUser","name","email","body","send","result","insertId","updateUser","deleteUser","module","exports"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,IAArC;;AAEA,MAAME,QAAQ,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACtCJ,EAAAA,IAAI,CAACK,KAAL,CAAW,qCAAX,EAAkD,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACpE,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BF,OAAO,CAACG,IAAlC;AACD,GALD;AAMD,CAPD;;AASA,MAAMC,WAAW,GAAG,CAACR,OAAD,EAAUC,QAAV,KAAuB;AACzC,QAAMQ,EAAE,GAAG,UAAST,OAAO,CAACU,MAAR,CAAeD,EAAxB,CAAX;;AAEAZ,EAAAA,IAAI,CAACK,KAAL,CAAW,mCAAX,EAAgD,CAACO,EAAD,CAAhD,EAAsD,CAACN,KAAD,EAAQC,OAAR,KAAoB;AACxE,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BF,OAAO,CAACG,IAAlC;AACD,GALD;AAMD,CATD;;AAWA,MAAMI,UAAU,GAAG,CAACX,OAAD,EAAUC,QAAV,KAAuB;AACxC,QAAM;AACJW,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFb,OAAO,CAACc,IAHZ;AAKAjB,EAAAA,IAAI,CAACK,KAAL,CAAW,iDAAX,EAA8D,CAACU,IAAD,EAAOC,KAAP,CAA9D,EAA6E,CAACV,KAAD,EAAQC,OAAR,KAAoB;AAC/F,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA2B,uBAAsBC,MAAM,CAACC,QAAS,EAAjE;AACD,GALD;AAMD,CAZD;;AAcA,MAAMC,UAAU,GAAG,CAAClB,OAAD,EAAUC,QAAV,KAAuB;AACxC,QAAMQ,EAAE,GAAG,UAAST,OAAO,CAACU,MAAR,CAAeD,EAAxB,CAAX;;AACA,QAAM;AACJG,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFb,OAAO,CAACc,IAHZ;AAKAjB,EAAAA,IAAI,CAACK,KAAL,CACE,sDADF,EAEE,CAACU,IAAD,EAAOC,KAAP,EAAcJ,EAAd,CAFF,EAGE,CAACN,KAAD,EAAQC,OAAR,KAAoB;AAClB,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA2B,0BAAyBN,EAAG,EAAvD;AACD,GARH;AAUD,CAjBD;;AAmBA,MAAMU,UAAU,GAAG,CAACnB,OAAD,EAAUC,QAAV,KAAuB;AACxC,QAAMQ,EAAE,GAAG,UAAST,OAAO,CAACU,MAAR,CAAeD,EAAxB,CAAX;;AAEAZ,EAAAA,IAAI,CAACK,KAAL,CAAW,iCAAX,EAA8C,CAACO,EAAD,CAA9C,EAAoD,CAACN,KAAD,EAAQC,OAAR,KAAoB;AACtE,QAAID,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AACDF,IAAAA,QAAQ,CAACI,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA2B,yBAAwBN,EAAG,EAAtD;AACD,GALD;AAMD,CATD;;AAWAW,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,QADe;AAEfS,EAAAA,WAFe;AAGfG,EAAAA,UAHe;AAIfO,EAAAA,UAJe;AAKfC,EAAAA;AALe,CAAjB","sourcesContent":["const pool = require('./connection').pool;\n\nconst getUsers = (request, response) => {\n  pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(200).json(results.rows)\n  })\n}\n\nconst getUserById = (request, response) => {\n  const id = parseInt(request.params.id)\n\n  pool.query('SELECT * FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(200).json(results.rows)\n  })\n}\n\nconst createUser = (request, response) => {\n  const {\n    name,\n    email\n  } = request.body\n\n  pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email], (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(201).send(`User added with ID: ${result.insertId}`)\n  })\n}\n\nconst updateUser = (request, response) => {\n  const id = parseInt(request.params.id)\n  const {\n    name,\n    email\n  } = request.body\n\n  pool.query(\n    'UPDATE users SET name = $1, email = $2 WHERE id = $3',\n    [name, email, id],\n    (error, results) => {\n      if (error) {\n        throw error\n      }\n      response.status(200).send(`User modified with ID: ${id}`)\n    }\n  )\n}\n\nconst deleteUser = (request, response) => {\n  const id = parseInt(request.params.id)\n\n  pool.query('DELETE FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error\n    }\n    response.status(200).send(`User deleted with ID: ${id}`)\n  })\n}\n\nmodule.exports = {\n  getUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser,\n}"]},"metadata":{},"sourceType":"script"}