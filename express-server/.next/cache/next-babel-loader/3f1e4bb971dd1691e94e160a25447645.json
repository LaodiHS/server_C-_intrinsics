{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport Link from \"next/link\";\nimport React from \"react\";\nimport \"../public/styles/a.css\";\nimport Login from \"./login/login\";\nimport styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\n\nvar MyGrid = function MyGrid(_ref) {\n  var data = _ref.data;\n  return __jsx(Grid, {\n    columns: data.length,\n    gap: \"2px\"\n  }, data.map(function (obj) {\n    return _Object$entries(obj).map(function (_ref2, i) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          val = _ref3[1];\n\n      return __jsx(Cell, {\n        className: \"whatEver\",\n        key: i\n      }, key, \" : \", val, \" \");\n    });\n  }));\n};\n\nvar Index = function Index(_ref4) {\n  var data = _ref4.data;\n  return __jsx(MyGrid, {\n    data: data\n  });\n};\n\nIndex.getInitialProps = function _callee() {\n  var pageRequest, res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pageRequest = \"https://localhost:3000/users\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(pageRequest));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          json = _context.sent;\n          console.log('process browser', true);\n          return _context.abrupt(\"return\", {\n            data: json\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/pages/index.js"],"names":["fetch","Link","React","Login","styled","Grid","Cell","MyGrid","data","length","map","obj","i","key","val","Index","getInitialProps","pageRequest","res","json","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,SACb,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEA,IAAI,CAACC,MAApB;AAA4B,IAAA,GAAG,EAAC;AAAhC,KACGD,IAAI,CAACE,GAAL,CAAS,UAAAC,GAAG,EAAI;AACf,WAAO,gBAAeA,GAAf,EAAoBD,GAApB,CAAwB,iBAAaE,CAAb,EAAmB;AAAA;AAAA,UAAjBC,GAAiB;AAAA,UAAZC,GAAY;;AAChD,aACE,MAAC,IAAD;AAAM,QAAA,SAAS,EAAC,UAAhB;AAA2B,QAAA,GAAG,EAAEF;AAAhC,SACGC,GADH,SACWC,GADX,EACgB,GADhB,CADF;AAKD,KANM,CAAP;AAOD,GARA,CADH,CADa;AAAA,CAAf;;AAcA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAGP,IAAH,SAAGA,IAAH;AAAA,SAAc,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAEA;AAAd,IAAd;AAAA,CAAd;;AACAO,KAAK,CAACC,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,WADgB;AAAA;AAAA,2CAEJjB,KAAK,CAACiB,WAAD,CAFD;;AAAA;AAEhBC,UAAAA,GAFgB;AAAA;AAAA,2CAGHA,GAAG,CAACC,IAAJ,EAHG;;AAAA;AAGhBA,UAAAA,IAHgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAJsB,2CAKf;AACLb,YAAAA,IAAI,EAAEW;AADD,WALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AASA,eAAeJ,KAAf","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport Link from \"next/link\";\nimport React from \"react\";\nimport \"../public/styles/a.css\";\nimport Login from \"./login/login\";\nimport styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\nconst MyGrid = ({data}) => (\n  <Grid columns={data.length} gap=\"2px\">\n    {data.map(obj => {\n      return Object.entries(obj).map(([key, val], i) => {\n        return (\n          <Cell className=\"whatEver\" key={i}>\n            {key} : {val}{\" \"}\n          </Cell>\n        );\n      });\n    })}\n  </Grid>\n);\n\nconst Index = ({ data }) => <MyGrid data={data}></MyGrid>;\nIndex.getInitialProps = async () => {\n  const pageRequest = `https://localhost:3000/users`;\n  const res = await fetch(pageRequest);\n  const json = await res.json();\n  console.log('process browser', process.browser);\n  return {\n    data: json\n  };\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}