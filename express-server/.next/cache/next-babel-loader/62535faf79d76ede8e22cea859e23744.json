{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\n// var mongoUtil = require( 'mongoUtil' );\n// var db = mongoUtil.getDb();\n// db.collection( 'users' ).find();\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { Grid, Cell } from \"styled-css-grid\";\n\nvar MyGrid = function MyGrid(val) {\n  return __jsx(Grid, null, _JSON$stringify(val.object.data), \"  \") // <Grid columns={val.object.length} gap=\"2px\">\n  //     {\n  //         val.object.data.map((obj) =>\n  //         {\n  //            return  Object.entries(obj).map( ([key, val], i) => {\n  //                 return <Cell className=\"whatEver\" key={i} > {key} : {val}  </Cell>\n  //            });\n  //     // <Cell>{JSON.stringify(val)}</Cell>\n  //         }\n  //         )\n  //     }\n  //      </Grid>\n  ;\n};\n\nvar Button = styled.button.withConfig({\n  displayName: \"pages__Button\",\n  componentId: \"sc-18qv4sc-0\"\n})([\"color:palevioletred;font-size:1em;margin:1em;padding:0.25em 1em;border:2px solid palevioletred;border-radius:3px;\"]); // A new component based on Button, but with some override styles\n\nvar TomatoButton = styled(Button).withConfig({\n  displayName: \"pages__TomatoButton\",\n  componentId: \"sc-18qv4sc-1\"\n})([\"color:tomato;border-color:tomato;\"]);\nimport Login from \"./login/login\";\nimport \"../public/styles/a.css\"; // const da =postgres.getUsers();\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", null, _JSON$stringify(props.data), __jsx(MyGrid, {\n    object: props.data\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var pageRequest, res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pageRequest = \"https://localhost:3000/users\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(pageRequest));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          json = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: json\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/pages/index.js"],"names":["fetch","Link","React","styled","Grid","Cell","MyGrid","val","object","data","Button","button","TomatoButton","Login","Index","props","getInitialProps","pageRequest","res","json"],"mappings":";;;AAAA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD;AAAA,SAEZ,MAAC,IAAD,QAAQ,gBAAeA,GAAG,CAACC,MAAJ,CAAWC,IAA1B,CAAR,OAFY,CAGX;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAhBW;AAAA,CAAf;;AAmBA,IAAMC,MAAM,GAAGP,MAAM,CAACQ,MAAV;AAAA;AAAA;AAAA,yHAAZ,C,CASA;;AACA,IAAMC,YAAY,GAAGT,MAAM,CAACO,MAAD,CAAT;AAAA;AAAA;AAAA,yCAAlB;AAKA,OAAOG,KAAP,MAAkB,eAAlB;AAEA,OAAO,wBAAP,C,CAEA;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,SAEd,mBAEM,gBAAeA,KAAK,CAACN,IAArB,CAFN,EAGQ,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAGM,KAAK,CAACN;AAAvB,IAHR,CAFc;AAAA,CAAd;;AAmBQK,KAAK,CAACE,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UAAAA,WADc;AAAA;AAAA,2CAEFjB,KAAK,CAACiB,WAAD,CAFH;;AAAA;AAEdC,UAAAA,GAFc;AAAA;AAAA,2CAGDA,GAAG,CAACC,IAAJ,EAHC;;AAAA;AAGdA,UAAAA,IAHc;AAAA,2CAKb;AACHV,YAAAA,IAAI,EAAEU;AADH,WALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAUR,eAAeL,KAAf","sourcesContent":["// var mongoUtil = require( 'mongoUtil' );\n// var db = mongoUtil.getDb();\n\n// db.collection( 'users' ).find();\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from \"react\";\n\nimport styled from 'styled-components';\nimport { Grid, Cell } from \"styled-css-grid\";\nconst MyGrid = (val) => (\n    \n   <Grid>{ JSON.stringify(val.object.data) }  </Grid>   \n    // <Grid columns={val.object.length} gap=\"2px\">\n    //     {\n    //         val.object.data.map((obj) =>\n    //         {\n    //            return  Object.entries(obj).map( ([key, val], i) => {\n    //                 return <Cell className=\"whatEver\" key={i} > {key} : {val}  </Cell>\n    //            });\n        \n    //     // <Cell>{JSON.stringify(val)}</Cell>\n    //         }\n                \n    //         )\n    //     }\n    //      </Grid>\n);\n  \nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// A new component based on Button, but with some override styles\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nimport Login from \"./login/login\";\n\nimport \"../public/styles/a.css\";\n\n// const da =postgres.getUsers();\n\nconst Index = (props) => (\n\n<div >\n  \n    { JSON.stringify(props.data)}\n        <MyGrid object= {props.data} ></MyGrid>\n            {/* {props.data.map(( obj) =>\n            {\n               return  Object.entries(obj).map( ([key, val], i) => {\n                return <Cell className=\"whatEver\" key={i} > {key}:{val}  </Cell>\n                });\n            })} */}\n       \n  \n\n    \n</div>\n \n       )\n        Index.getInitialProps = async() => {\n            const pageRequest = `https://localhost:3000/users`;\n            const res = await fetch(pageRequest)\n            const json = await res.json();\n         \n            return {\n                data: json\n            }\n        }\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}