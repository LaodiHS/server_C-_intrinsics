{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"../../../public/styles/a.css\";\nvar divStyle = {\n  backgroundColor: \"#6666ff\",\n  color: \"red\"\n};\n\nclass Paging extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      getPages: async (page = 0, order = \"asc\") => {\n        page = page < 0 ? 0 : page;\n        this.state.i = page;\n        let res = await fetch(`https://localhost:3000/users/${page}/${order}`);\n        res = await res.json();\n        res = Array.from(res);\n        this.setState({\n          data: res.map(objects => Object.entries(objects))\n        }, () => {});\n      },\n      i: 0\n    };\n    this.state.getPages(this.state.i++);\n  }\n\n  render() {\n    return __jsx(MyPaging, {\n      data: this.state\n    });\n  }\n\n}\n\nconst MyPaging = ({\n  data\n}) => __jsx(Grid, {\n  columns: \"100px 1fr 100px\",\n  rows: \"minmax(100px,auto) 1fr minmax(100px,auto)\"\n}, __jsx(Cell, null, __jsx(\"button\", {\n  onClick: () => data.getPages(++data.i)\n}, \" next \"), __jsx(\"button\", {\n  onClick: () => data.getPages(--data.i)\n}, \" previous \")), __jsx(Cell, {\n  center: true,\n  middle: true\n}, __jsx(Grid, {\n  columns: \"repeat(auto-fit,minmax(120px,1fr))\"\n}, data.data.map(values => values.map(([key, val], i) => {\n  if (key !== \"password\" && key !== \"passwordsalt\" && key !== \"id\") return __jsx(Cell, {\n    width: 2,\n    height: 2,\n    key: i\n  }, key, \" : \", val);\n})), \" \"), \" \"));\n\nexport default Paging;","map":{"version":3,"sources":["/home/hoss/Documents/algorithms/server_layer/server/express-server/pages/components/layout/Paging.js"],"names":["styled","Grid","Cell","fetch","divStyle","backgroundColor","color","Paging","React","Component","constructor","state","data","getPages","page","order","i","res","json","Array","from","setState","map","objects","Object","entries","render","MyPaging","values","key","val"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,8BAAP;AACA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,eAAe,EAAE,SADJ;AAEbC,EAAAA,KAAK,EAAE;AAFM,CAAf;;AAIA,MAAMC,MAAN,SAAqBC,KAAK,CAACC,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,QAAQ,EAAE,OAAOC,IAAI,GAAG,CAAd,EAAiBC,KAAK,GAAG,KAAzB,KACV;AACED,QAAAA,IAAI,GAAGA,IAAI,GAAG,CAAP,GAAW,CAAX,GAAeA,IAAtB;AACA,aAAKH,KAAL,CAAWK,CAAX,GAAeF,IAAf;AACA,YAAIG,GAAG,GAAG,MAAMd,KAAK,CAAE,gCAA+BW,IAAK,IAAGC,KAAM,EAA/C,CAArB;AACAE,QAAAA,GAAG,GAAG,MAAMA,GAAG,CAACC,IAAJ,EAAZ;AACAD,QAAAA,GAAG,GAAEE,KAAK,CAACC,IAAN,CAAWH,GAAX,CAAL;AACA,aAAKI,QAAL,CAAc;AAAET,UAAAA,IAAI,EAAGK,GAAG,CAACK,GAAJ,CAAQC,OAAO,IAAIC,MAAM,CAACC,OAAP,CAAeF,OAAf,CAAnB;AAAT,SAAd,EAAsE,MAAM,CAE3E,CAFD;AAGD,OAZU;AAaXP,MAAAA,CAAC,EAAG;AAbO,KAAb;AAgBA,SAAKL,KAAL,CAAWE,QAAX,CAAoB,KAAKF,KAAL,CAAWK,CAAX,EAApB;AACD;;AAEDU,EAAAA,MAAM,GAAG;AAEP,WAAO,MAAC,QAAD;AAAU,MAAA,IAAI,EAAE,KAAKf;AAArB,MAAP;AACD;;AA1BkC;;AA6BrC,MAAMgB,QAAQ,GAAG,CAAC;AAAEf,EAAAA;AAAF,CAAD,KACf,MAAC,IAAD;AACA,EAAA,OAAO,EAAE,iBADT;AAEA,EAAA,IAAI,EAAE;AAFN,GAGC,MAAC,IAAD,QAAM;AAAQ,EAAA,OAAO,EAAE,MAAIA,IAAI,CAACC,QAAL,CAAc,EAAED,IAAI,CAACI,CAArB;AAArB,YAAN,EAAmE;AAAQ,EAAA,OAAO,EAAE,MAAIJ,IAAI,CAACC,QAAL,CAAc,EAAED,IAAI,CAACI,CAArB;AAArB,gBAAnE,CAHD,EAKE,MAAC,IAAD;AAAM,EAAA,MAAM,MAAZ;AAAa,EAAA,MAAM;AAAnB,GACE,MAAC,IAAD;AAAM,EAAA,OAAO,EAAC;AAAd,GAEGJ,IAAI,CAACA,IAAL,CAAUU,GAAV,CAAcM,MAAM,IAAIA,MAAM,CAACN,GAAP,CAAW,CAAC,CAACO,GAAD,EAAMC,GAAN,CAAD,EAAad,CAAb,KACpC;AACE,MAAIa,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,cAA9B,IAAgDA,GAAG,KAAI,IAA3D,EACA,OACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAb;AAAgB,IAAA,MAAM,EAAE,CAAxB;AAA2B,IAAA,GAAG,EAAGb;AAAjC,KACGa,GADH,SACWC,GADX,CADF;AAMD,CATwB,CAAxB,CAFH,EAWQ,GAXR,CADF,EAaU,GAbV,CALF,CADF;;AAwBA,eAAevB,MAAf","sourcesContent":["import styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"../../../public/styles/a.css\";\nvar divStyle = {\n  backgroundColor: \"#6666ff\",\n  color: \"red\",\n};\nclass Paging extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: [],\n      getPages: async (page = 0, order = \"asc\") =>\n      {\n        page = page < 0 ? 0 : page\n        this.state.i = page; \n        let res = await fetch(`https://localhost:3000/users/${page}/${order}`);\n        res = await res.json();\n        res= Array.from(res)\n        this.setState({ data : res.map(objects => Object.entries(objects)) }, () => {\n       \n        });\n      },\n      i : 0\n    };\n   \n    this.state.getPages(this.state.i++)\n  }\n\n  render() {\n   \n    return <MyPaging data={this.state}></MyPaging>;\n  }\n \n}\nconst MyPaging = ({ data }) => (\n  <Grid\n  columns={\"100px 1fr 100px\"}\n  rows={\"minmax(100px,auto) 1fr minmax(100px,auto)\"}\n  ><Cell><button onClick={()=>data.getPages(++data.i)}> next </button><button onClick={()=>data.getPages(--data.i)}> previous </button></Cell>\n    \n    <Cell center middle>\n      <Grid columns=\"repeat(auto-fit,minmax(120px,1fr))\">\n      \n        {data.data.map(values => values.map(([key, val], i) =>\n        {\n          if (key !== \"password\" && key !== \"passwordsalt\" && key !==\"id\")\n          return (\n            <Cell width={2} height={2} key={ i}>\n              {key} : {val} \n            </Cell>\n          );\n\n        } ))}{\" \"}\n      </Grid>{\" \"}\n    </Cell>\n  </Grid>\n);\n\nexport default Paging;\n"]},"metadata":{},"sourceType":"module"}